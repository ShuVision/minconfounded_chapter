srrs2.fips <- srrs2$stfips*1000 + srrs2$cntyfips
cty <- read.table ("/Users/adam/Documents/Thesis/Gelman and Hill 2007/Book_Codes/Ch.12/cty.dat", header=T, sep=",")
usa.fips <- 1000*cty[,"stfips"] + cty[,"ctfips"]
usa.rows <- match (unique(srrs2.fips[mn]), usa.fips)
uranium <- cty[usa.rows,"Uppm"]
u <- log (uranium)
uranium <- u[county]
-------------------------------------------------------------------------------
Functions to caluclate rotated residuals
-------------------------------------------------------------------------------
Function to reorganize Z
BlockZ <- function(object) {
Z <- getME(object, "Z")
grp.size <- table(object@flist)
ngrps <- length(grp.size)
nranef <- dim(ranef(object)[[1]])[2]
base.ord <- seq(from = 1, by = ngrps, length.out = nranef)
ord <- base.ord + rep(0:(ngrps - 1), each = nranef)
perm.mat <- t(as(ord, "pMatrix"))
return(Z %*% perm.mat)
}
Function carrying out the Reduction Method of McDonald et al. (1979)
mcrotate <- function(A, B) {
r <- rankMatrix(B)
B.svd <- svd(B)
Cr.diag <- B.svd$d[1:r]
Tr <- B.svd$u[, 1:r]
A.star <- Diagonal( x = 1 / sqrt(Cr.diag) ) %*% t(Tr) %*%
A %*%
Tr %*% Diagonal( x = 1 / sqrt(Cr.diag) )
A.star.svd <- svd( A.star )
W <- Tr %*% Diagonal( x = 1 / sqrt( Cr.diag ) ) %*% A.star.svd$u
return(W)
}
Function to calculate minimally confounded residuals for a requested level
.mod = mer object
.level = 1 or 2
.L = the constrasts used for level-2 residuals
mcresiduals <- function(.mod, .level, .L){
X <- getME(.mod, "X")
Z <- BlockZ(.mod)
n <- nrow(X)
p <- ncol(X)
ngrps <- unname( summary(.mod)@ngrps )
vc <- VarCorr(.mod)
Di <- Diagonal(x = c(vc[[1]], vc[[2]])) / (unname(attr(vc, "sc")))^2
D  <- kronecker( Diagonal(ngrps), Di )
Aslot <- .mod@A # ZDZ'
zdzt <- crossprod( .mod@A )
V  <- Diagonal( n ) + zdzt
V.chol <- chol( V )
Vinv  <- chol2inv( V.chol )
xvix <- t(X) %*% Vinv %*% X
xvi <- t(X) %*% Vinv
rhs <- crossprod(xvi, solve(xvix, xvi))
P <- Vinv - rhs
For level-1 min. confounded resids
if(.level == 1) {
A <- P %*% zdzt %*% P
B <- P
W <- try( mcrotate(A, B) )
if( class(W) == "try-error")  W <- NA else W <- as.matrix(W)
return( t(W) %*% resid(.mod) )
}
For level-2 min. confounded resids for intercept
if(.level == 2) {
pzdl <- P %*% Z %*% D %*% .L
A <- crossprod( pzdl )
B <- t(.L) %*% D %*% t(Z) %*% P %*% Z %*% D %*% .L ## diagnostic se
W <- try( mcrotate(A, B) )
if( class(W) == "try-error")  W <- NA else W <- as.matrix(W)
bmat <- matrix(t(ranef(fm)[[1]]), ncol=1)
return( t(W) %*% t(.L) %*% bmat )
}
X <- getME(fm, "X")
Z <- BlockZ(fm)
n <- nrow(X)
p <- ncol(X)
ngrps <- unname( summary(fm)@ngrps )
vc <- VarCorr(fm)
Di <- Diagonal(x = c(vc[[1]], vc[[2]])) / (unname(attr(vc, "sc")))^2
D  <- kronecker( Diagonal(ngrps), Di )
Aslot <- .mod@A # ZDZ'
zdzt <- crossprod( .mod@A )
V  <- Diagonal( n ) + zdzt
V.chol <- chol( V )
Vinv  <- chol2inv( V.chol )
xvix <- t(X) %*% Vinv %*% X
xvi <- t(X) %*% Vinv
rhs <- crossprod(xvi, solve(xvix, xvi))
P <- Vinv - rhs
fm <- lmer(log.radon ~ basement + uranium + (1 | county) + (0 + basement | county), REML = FALSE)
display(fm)
@
X <- getME(fm, "X")
Z <- BlockZ(fm)
n <- nrow(X)
p <- ncol(X)
ngrps <- unname( summary(fm)@ngrps )
vc <- VarCorr(fm)
Di <- Diagonal(x = c(vc[[1]], vc[[2]])) / (unname(attr(vc, "sc")))^2
D  <- kronecker( Diagonal(ngrps), Di )
Aslot <- .mod@A # ZDZ'
zdzt <- crossprod( .mod@A )
V  <- Diagonal( n ) + zdzt
V.chol <- chol( V )
Vinv  <- chol2inv( V.chol )
xvix <- t(X) %*% Vinv %*% X
xvi <- t(X) %*% Vinv
rhs <- crossprod(xvi, solve(xvix, xvi))
P <- Vinv - rhs
X <- getME(fm, "X")
Z <- BlockZ(fm)
n <- nrow(X)
p <- ncol(X)
ngrps <- unname( summary(fm)@ngrps )
vc <- VarCorr(fm)
Di <- Diagonal(x = c(vc[[1]], vc[[2]])) / (unname(attr(vc, "sc")))^2
D  <- kronecker( Diagonal(ngrps), Di )
Aslot <- fm@A # ZDZ'
zdzt <- crossprod( fm@A )
V  <- Diagonal( n ) + zdzt
V.chol <- chol( V )
Vinv  <- chol2inv( V.chol )
xvix <- t(X) %*% Vinv %*% X
xvi <- t(X) %*% Vinv
rhs <- crossprod(xvi, solve(xvix, xvi))
P <- Vinv - rhs
\begin{figure}
par(mfrow = c(1,3))
qqnorm(lev1, main = "Observed Residuals"); qqline(lev1)
qqnorm(mcr1, main = "Minimally Confounded"); qqline(mcr1)
289/60
library(lar)
library(lars)
data(diabetes)#
par(mfrow=c(2,2))#
attach(diabetes)#
object <- lars(x,y)#
plot(object)#
object2 <- lars(x,y,type="lar")#
plot(object2)#
object3 <- lar
summary(object)
print(lars)
print(object)
data(diabetes)#
par(mfrow=c(2,2))#
attach(diabetes)#
object <- lars(x,y)#
plot(object)#
object2 <- lars(x,y,type="lar")#
plot(object2)
Preliminaries#
library(lme4)#
library(arm)       # for nicer print outs from lmer#
library(ggplot2)#
library(nortest)   # for tests of normality#
library(boot)      # for simulation envelopes#
#
### Reading in the radon data provided by Gelman and Hill (2007)#
srrs2 <- read.table ("/Users/adam/Documents/Thesis/Gelman and Hill 2007/ARM_Data/radon/srrs2.dat", header=T, sep=",")#
#
## Restricting attention to Minnesota#
mn <- srrs2$state=="MN"#
radon <- srrs2$activity[mn]#
log.radon <- log (ifelse (radon==0, .1, radon))#
floor <- srrs2$floor[mn]       # 0 for basement, 1 for first floor#
n <- length(radon)#
y <- log.radon#
basement <- floor#
#
## Getting county index variable#
county.name <- as.vector(srrs2$county[mn])#
uniq <- unique(county.name)#
J <- length(uniq)#
county <- rep (NA, J)#
for (i in 1:J){#
  county[county.name==uniq[i]] <- i#
}#
#
## Reading the county-level data#
srrs2.fips <- srrs2$stfips*1000 + srrs2$cntyfips#
cty <- read.table ("/Users/adam/Documents/Thesis/Gelman and Hill 2007/Book_Codes/Ch.12/cty.dat", header=T, sep=",")#
usa.fips <- 1000*cty[,"stfips"] + cty[,"ctfips"]#
usa.rows <- match (unique(srrs2.fips[mn]), usa.fips)#
uranium <- cty[usa.rows,"Uppm"]#
u <- log (uranium)#
uranium <- u[county]#
### Fitting a model with random intercept for county and #
### random slope for basement.#
fm <- lmer(log.radon ~ basement + uranium + (basement | county), REML = FALSE)#
lev1 <- resid(fm)#
rint <- ranef(fm)[[1]][,1]#
rslope <- ranef(fm)[[1]][,2]#
#
bmat <- matrix(t(ranef(fm)[[1]]), ncol=1)
library(nullabor)#
library(HLMdiag)#
library(plyr)
set.seed(987654321)#
y.sim <- simulate(fm, nsim = 19)				# simulate responses#
mod.sim <- apply(y.sim, 2, refit, object = fm)	# refit model
Level-1#
r1 <- data.frame(resid = resid(fm))#
sim.lev1.resid <- ldply(mod.sim, function(x) data.frame(resid = resid(x)))#
sim.lev1.resid$.n <- as.numeric(sapply(strsplit(sim.lev1.resid$.id, "\\_"), "[", 2))
Level-2#
r2 <- data.frame(X.Intercept. = rint, basement = rslope)#
r2 <- transform(r2, band = sim_env(basement), x = sort(qqnorm(basement, plot.it=FALSE)$x))
BlockZ <- function(object) {#
  Z <- getME(object, "Z")#
  grp.size <- table(object@flist)#
  ngrps <- length(grp.size)#
  nranef <- dim(ranef(object)[[1]])[2]#
  base.ord <- seq(from = 1, by = ngrps, length.out = nranef)#
  ord <- base.ord + rep(0:(ngrps - 1), each = nranef)#
  perm.mat <- t(as(ord, "pMatrix"))#
  return(Z %*% perm.mat)#
}#
#
mcrotate <- function(A, B) {#
  r <- rankMatrix(B)#
  B.svd <- svd(B)#
  Cr.diag <- B.svd$d[1:r]#
  Tr <- B.svd$u[, 1:r]#
  A.star <- Diagonal( x = 1 / sqrt(Cr.diag) ) %*% t(Tr) %*% #
    A %*% #
    Tr %*% Diagonal( x = 1 / sqrt(Cr.diag) )#
  A.star.svd <- svd( A.star )#
  W <- Tr %*% Diagonal( x = 1 / sqrt( Cr.diag ) ) %*% A.star.svd$u#
  return(W)#
}#
#
X <- getME(fm, "X")#
Z <- BlockZ(fm) #
#
n <- nrow(X)#
p <- ncol(X)#
ngrps <- unname( summary(fm)@ngrps )#
vc <- VarCorr(fm)#
D <- kronecker( Diagonal(ngrps), as.matrix(vc[[1]]))#
R <- Diagonal( n = n, x = attr(vc, "sc")^2 )#
#
V <- Z %*% D %*% t(Z) + R#
V.chol <- chol( V )#
Vinv  <- chol2inv( V.chol )#
#
xvix <- t(X) %*% Vinv %*% X#
xvi <- t(X) %*% Vinv#
rhs <- crossprod(xvi, solve(xvix, xvi))#
P <- Vinv - rhs#
#
### Level-1#
A1 <- R %*% P %*% Z %*% D %*% t(Z) %*% P %*% R#
B1 <- R %*% P %*% R#
#
M1 <- mcrotate(A = A1, B = B1)#
lcr1 <- as.matrix( t(M1) %*% resid(fm) )
Random intercept#
L.int <- kronecker(Diagonal(ngrps), c(1, 0))#
#
A.int <- t(L.int) %*% D %*% t(Z) %*% P %*% R %*% P %*% Z %*% D %*% L.int#
B.int <- t(L.int) %*% D %*% t(Z) %*% P %*% Z %*% D %*% L.int#
#
M.int <- mcrotate(A = A.int, B = B.int)#
lcr2.int <- as.matrix( t(M.int) %*% rint )
L.slope <- kronecker(Diagonal(ngrps), c(0, 1))#
#
# A.slope <- as.matrix(t(L.slope) %*% D %*% t(Z) %*% P %*% R %*% P %*% Z %*% D %*% L.slope)#
A.slope <-  as.matrix( attr(vc, "sc")^2 * crossprod(P %*% Z %*% D %*% L.slope) )#
B.slope <- t(L.slope) %*% D %*% t(Z) %*% P %*% Z %*% D %*% L.slope#
#
M.slope <- mcrotate(A = A.slope, B = B.slope)#
lcr2.slope <- as.matrix( t(M.slope) %*% rslope )
wts.means <- apply(as.matrix(t(M.slope)), 2, mean)#
wts.var <- apply(as.matrix(t(M.slope)), 2, var)
wts.means
hist(wts.means)
quantiles(wts.means, probs=seq(0,1,.1))
quantile(wts.means, probs=seq(0,1,.1))
summary(wts.means)
qplot(wts.means)
boxplot
graphics:::boxplot
methods(boxplot)
boxplot.default
qqplot(sample = rint)
qqplot(sample = rint, stat = "qq")
qplot(sample = rint, stat = "qq")
qplot(sample = rslope, stat = "qq")
qqnorm(rslope)
identify()
wts.means <- apply(as.matrix(t(M.slope)), 2, mean)
wts.means
wts.df <- data.frame(wts = wts.means, raw = rslope)
qplot(x = wts.df, y=raw, data = wts.df)
length(rslope)
str(wts.df)
qplot(x = wts, y = raw, data = wts.df)
wts.df <- data.frame(wts = wts.means, raw = rslope, low = wts < -.5, high = wts > .5)
wts.df <- data.frame(wts = wts.means, raw = rslope, low = wts.means < -.5, high = wts.means > .5)
wts.df
qplot(x = wts, y = raw, data = wts.df)
qplot(sample = raw, stat = "qq", data = wts.df, fill = low)
qplot(sample = raw, stat = "qq", data = wts.df, colour = low)
qplot(sample = raw, stat = "qq", data = wts.df, colour = intersect(low, high))
qplot(sample = raw, stat = "qq", data = wts.df, colour = low:high)
qplot(sample = raw, stat = "qq", data = wts.df, colour = factor(low:high))
qplot(sample = raw, stat = "qq", data = wts.df, colour = high)
qplot(x = wts, y = raw, data = wts.df)
qplot(sample = raw, stat = "qq", data = wts.df, colour = high)
qplot(sample = raw, stat = "qq", data = wts.df)
qplot(sample = raw, stat = "qq", data = wts.df) +  #
	geom_point(aes(x = qqnorm(rslope, plot.it=FALSE)$x, y = qqnorm(rslope, plot.it=FALSE)$y, colour = high)
qplot(sample = raw, stat = "qq", data = wts.df) +  #
	geom_point(aes(x = qqnorm(rslope, plot.it=FALSE)$x, y = qqnorm(rslope, plot.it=FALSE)$y), colour = high)
qplot(x = wts, y = raw, data = wts.df)#
qplot(sample = raw, stat = "qq", data = wts.df) +  #
	geom_point(aes(x = qqnorm(rslope, plot.it=FALSE)$x, y = qqnorm(rslope, plot.it=FALSE)$y), colour = wts.df$high)
qqnorm(wts.means, plot.it=F)
j <- qqnorm(wts.means, plot.it=F)
j
rslope
j <- qqnorm(rslope, plot.it=F)
j
wts.means
wts.df <- data.frame(wts = wts.means, raw = rslope, quants = qqnorm(rslope, plot.it=F)$x, low = wts.means < -.5, high = wts.means > .5)
head(wts.df)
library(iplots)
library(cranvas)
help(package=cranvas)
qhist(x=wts, data = wts.means)
qhist(x=wts, data = wts.df)
Preliminaries#
library(lme4)#
library(arm)       # for nicer print outs from lmer#
library(ggplot2)#
library(nortest)   # for tests of normality#
library(boot)      # for simulation envelopes#
#
### Reading in the radon data provided by Gelman and Hill (2007)#
srrs2 <- read.table ("/Users/adam/Documents/Thesis/Gelman and Hill 2007/ARM_Data/radon/srrs2.dat", header=T, sep=",")#
#
## Restricting attention to Minnesota#
mn <- srrs2$state=="MN"#
radon <- srrs2$activity[mn]#
log.radon <- log (ifelse (radon==0, .1, radon))#
floor <- srrs2$floor[mn]       # 0 for basement, 1 for first floor#
n <- length(radon)#
y <- log.radon#
basement <- floor#
#
## Getting county index variable#
county.name <- as.vector(srrs2$county[mn])#
uniq <- unique(county.name)#
J <- length(uniq)#
county <- rep (NA, J)#
for (i in 1:J){#
  county[county.name==uniq[i]] <- i#
}#
#
## Reading the county-level data#
srrs2.fips <- srrs2$stfips*1000 + srrs2$cntyfips#
cty <- read.table ("/Users/adam/Documents/Thesis/Gelman and Hill 2007/Book_Codes/Ch.12/cty.dat", header=T, sep=",")#
usa.fips <- 1000*cty[,"stfips"] + cty[,"ctfips"]#
usa.rows <- match (unique(srrs2.fips[mn]), usa.fips)#
uranium <- cty[usa.rows,"Uppm"]#
u <- log (uranium)#
uranium <- u[county]#
### Fitting a model with random intercept for county and #
### random slope for basement.#
fm <- lmer(log.radon ~ basement + uranium + (basement | county), REML = FALSE)#
lev1 <- resid(fm)#
rint <- ranef(fm)[[1]][,1]#
rslope <- ranef(fm)[[1]][,2]#
#
bmat <- matrix(t(ranef(fm)[[1]]), ncol=1)#
#
#-------------------------------------------------------------------------------#
# Normal quantile plots for the sample residuals#
#-------------------------------------------------------------------------------#
#
sim_env <- function(x, conf = .95){#
  n <- length(x)#
  P <- ppoints(x)#
  z <- qnorm(P)#
  a <- as.numeric(HLMdiag:::qqlineInfo(x)[1])#
  b <- as.numeric(HLMdiag:::qqlineInfo(x)[2])#
  zz <- qnorm(1 - (1 - conf)/2)#
  SE <- (b/dnorm(z)) * sqrt(P * (1 - P)/n)#
  fit.value <- a + b * z#
  upper <- fit.value + zz * SE#
  lower <- fit.value - zz * SE#
  return(data.frame(lower, upper))#
}
library(nullabor)#
library(HLMdiag)#
library(plyr)#
#
set.seed(987654321)#
y.sim <- simulate(fm, nsim = 19)				# simulate responses#
mod.sim <- apply(y.sim, 2, refit, object = fm)	# refit model #
#
## Level-1#
r1 <- data.frame(resid = resid(fm))#
sim.lev1.resid <- ldply(mod.sim, function(x) data.frame(resid = resid(x)))#
sim.lev1.resid$.n <- as.numeric(sapply(strsplit(sim.lev1.resid$.id, "\\_"), "[", 2))#
#
qplot(sample = resid, data = r1, stat = "qq") %+%#
	lineup(true = r1, sample = sim.lev1.resid) + #
	facet_wrap(~ .sample, ncol = 4) + #
	xlab("Normal Quantiles") + ylab("Order Statistics")#
## Level-2#
r2 <- data.frame(X.Intercept. = rint, basement = rslope)#
r2 <- transform(r2, band = sim_env(basement), x = sort(qqnorm(basement, plot.it=FALSE)$x))#
sim.lev2.resid <- ldply(mod.sim, function(x) data.frame(ranef(x)[[1]]))#
sim.lev2.resid$.n <- as.numeric(sapply(strsplit(sim.lev2.resid$.id, "\\_"), "[", 2))#
sim.lev2.resid <- ddply(sim.lev2.resid, .(.id), transform, band = sim_env(basement), x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
# Intercept#
qplot(sample = X.Intercept., data = r2, stat = "qq") %+%#
	lineup(true = r2, sample = sim.lev2.resid) + #
	facet_wrap(~ .sample, ncol = 4) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")#
#
# Slope	#
library(grid)#
set.seed(123456)#
qplot(sample = basement, data = r2, stat = "qq") %+%#
	lineup(true = r2, sample = sim.lev2.resid) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles") +  #
	theme_bw() + #
	theme(panel.margin = unit(0, "lines"))
ggsave("test.jpeg")
ggsave("test.jpeg")
BlockZ <- function(object) {#
  Z <- getME(object, "Z")#
  grp.size <- table(object@flist)#
  ngrps <- length(grp.size)#
  nranef <- dim(ranef(object)[[1]])[2]#
  base.ord <- seq(from = 1, by = ngrps, length.out = nranef)#
  ord <- base.ord + rep(0:(ngrps - 1), each = nranef)#
  perm.mat <- t(as(ord, "pMatrix"))#
  return(Z %*% perm.mat)#
}#
#
mcrotate <- function(A, B) {#
  r <- rankMatrix(B)#
  B.svd <- svd(B)#
  Cr.diag <- B.svd$d[1:r]#
  Tr <- B.svd$u[, 1:r]#
  A.star <- Diagonal( x = 1 / sqrt(Cr.diag) ) %*% t(Tr) %*% #
    A %*% #
    Tr %*% Diagonal( x = 1 / sqrt(Cr.diag) )#
  A.star.svd <- svd( A.star )#
  W <- Tr %*% Diagonal( x = 1 / sqrt( Cr.diag ) ) %*% A.star.svd$u#
  return(W)#
}#
#
X <- getME(fm, "X")#
Z <- BlockZ(fm) #
#
n <- nrow(X)#
p <- ncol(X)#
ngrps <- unname( summary(fm)@ngrps )#
vc <- VarCorr(fm)#
D <- kronecker( Diagonal(ngrps), as.matrix(vc[[1]]))#
R <- Diagonal( n = n, x = attr(vc, "sc")^2 )#
#
V <- Z %*% D %*% t(Z) + R#
V.chol <- chol( V )#
Vinv  <- chol2inv( V.chol )#
#
xvix <- t(X) %*% Vinv %*% X#
xvi <- t(X) %*% Vinv#
rhs <- crossprod(xvi, solve(xvix, xvi))#
P <- Vinv - rhs#
#
### Level-1#
A1 <- R %*% P %*% Z %*% D %*% t(Z) %*% P %*% R#
B1 <- R %*% P %*% R#
#
M1 <- mcrotate(A = A1, B = B1)#
lcr1 <- as.matrix( t(M1) %*% resid(fm) )#
#
qplot(sample = lcr1, stat = "qq", ylab = "Order Statistics", #
      xlab = "Normal Quantiles") + theme_bw() + #
  geom_abline(intercept = 0, slope = 1)#
### Random intercept#
L.int <- kronecker(Diagonal(ngrps), c(1, 0))#
#
A.int <- t(L.int) %*% D %*% t(Z) %*% P %*% R %*% P %*% Z %*% D %*% L.int#
B.int <- t(L.int) %*% D %*% t(Z) %*% P %*% Z %*% D %*% L.int#
#
M.int <- mcrotate(A = A.int, B = B.int)#
lcr2.int <- as.matrix( t(M.int) %*% rint )#
lcrint.env <- sim_env(lcr2.int)#
lcrint.qq <- qqnorm(lcr2.int, plot.it = FALSE)#
lcrint.qq <- lapply(lcrint.qq, sort)
rsv <- ranef(fm, postVar=TRUE)#
rslope.var <- apply(attr(rsv[[1]], "postVar"), 3, function(x) x[2,2])
out.df <- data.frame( row = c(19, 29, 59), as.matrix(zapsmall(t(M.int)[c(19, 29, 59),])))#
out.melt <- melt(out.df, id.vars="row")#
out.melt$col <- as.numeric(out.melt$variable)#
out.melt$max <- pmax(out.melt$value, 0)#
out.melt$min <- pmin(out.melt$value, 0)
library(ddply)
library(plyr)
library(reshape2)
out.df <- data.frame( row = c(19, 29, 59), as.matrix(zapsmall(t(M.int)[c(19, 29, 59),])))#
out.melt <- melt(out.df, id.vars="row")#
out.melt$col <- as.numeric(out.melt$variable)#
out.melt$max <- pmax(out.melt$value, 0)#
out.melt$min <- pmin(out.melt$value, 0)
Random slope#
L.slope <- kronecker(Diagonal(ngrps), c(0, 1))#
#
# A.slope <- as.matrix(t(L.slope) %*% D %*% t(Z) %*% P %*% R %*% P %*% Z %*% D %*% L.slope)#
A.slope <-  as.matrix( attr(vc, "sc")^2 * crossprod(P %*% Z %*% D %*% L.slope) )#
B.slope <- t(L.slope) %*% D %*% t(Z) %*% P %*% Z %*% D %*% L.slope#
#
M.slope <- mcrotate(A = A.slope, B = B.slope)#
lcr2.slope <- as.matrix( t(M.slope) %*% rslope )
lcrslope.env <- sim_env(lcr2.slope)#
lcrslope.qq <- qqnorm(lcr2.slope, plot.it = FALSE)#
lcrslope.qq <- lapply(lcrslope.qq, sort)
wts.means <- apply(as.matrix(t(M.slope)), 2, mean)#
wts.var <- apply(as.matrix(t(M.slope)), 2, var)
wts.df <- data.frame(wts = wts.means, raw = rslope, #
	quants = qqnorm(rslope, plot.it=F)$x)#
wts.df$color <- "Mid"#
wts.df$color[c(50, 32, 73, 51, 11, 6, 85, 60, 52, 82, 16, 12, 68, 42)] <- "Tail"#
wts.df$color[c(73, 51, 11, 6, 85, 60, 52, 82, 16, 12)] <- "Tail" #
wts.df$color <- factor(wts.df$color)#
wts.df$color <- factor(wts.df$color, levels(wts.df$color)[2:1])
wts.means <- apply(as.matrix(t(M.int)), 2, mean)#
wts.var <- apply(as.matrix(t(M.int)), 2, var)#
#
wts.df <- data.frame(wts = wts.means, raw = rint, #
	quants = qqnorm(rint, plot.it=F)$x, low = wts.means < -.5, #
	high = wts.means > .5)
tmslope <- as.matrix(zapsmall(t(M.slope)))#
colnames(tmslope) <- unique(str_trim(county.name))
ggfluctuation <- function (table, type = "size", floor = 0, ceiling = max(table$freq, #
    na.rm = TRUE)) #
{#
    .Deprecated()#
    if (is.table(table)) #
        table <- as.data.frame(t(table))#
    oldnames <- names(table)#
    names(table) <- c("x", "y", "result")#
    table <- transform(table, x = as.factor(x), y = as.factor(y), #
        freq = result)#
    if (type == "size") {#
        table <- transform(table, freq = sqrt(pmin(freq, ceiling)/ceiling), #
            border = ifelse(is.na(freq), "grey90", ifelse(freq > #
                ceiling, "grey30", "grey50")))#
        table[is.na(table$freq), "freq"] <- 1#
        table <- subset(table, freq * ceiling >= floor)#
    }#
    if (type == "size") {#
        nx <- length(levels(table$x))#
        ny <- length(levels(table$y))#
        p <- ggplot(table, aes_string(x = "x", y = "y", height = "freq", #
            width = "freq", fill = "border")) + geom_tile(colour = "white") + #
            scale_fill_identity() + theme(aspect.ratio = ny/nx)#
    }#
    else {#
        p <- ggplot(table, aes_string(x = "x", y = "y", fill = "freq")) + #
            geom_tile(colour = "white") + scale_fill_gradient2(expression(sign(w[ij])*sqrt(abs(w[ij])))#
, low = "red", mid="white", high = "blue")#
    }#
    p$xlabel <- oldnames[1]#
    p$ylabel <- oldnames[2]#
    p#
}
library(stringr)#
tmslope <- as.matrix(zapsmall(t(M.slope)))#
#
colnames(tmslope) <- str_trim(unique(county.name))#
rownames(tmslope) <- as.character(1:84)#
heatmap.info <- heatmap(tmslope)#
#
# reordered.tmslope <- tmslope[heatmap.info$rowInd, heatmap.info$colInd]#
# reordered.tmslope2 <- reordered.tmslope[, c(4:84, 3:1, 85)]#
reordered.tmslope <- tmslope[, order(rslope.var)]#
reordered.tmslope2.tform <- sign(reordered.tmslope) * sqrt(abs(reordered.tmslope))#
# reordered.tmslope2.tform <- (reordered.tmslope2)^(1/3)
ggfluctuation(as.table(reordered.tmslope2.tform), type = "colour") + #
  theme(axis.text.x = theme_text(angle = 90, hjust=1, vjust=.5, size=6, colour="black"),#
    axis.text.y = theme_text(size=6, colour="black")) + #
  xlab("County") + ylab("Index of Rotated Residuals") + #
  coord_equal() + #
  theme(panel.margin = unit(0, "lines"))
tmslope <- as.matrix(zapsmall(t(M.slope)))
colnames(tmslope) <- str_trim(unique(county.name))#
rownames(tmslope) <- as.character(1:84)
reordered.tmslope <- tmslope[, order(rslope.var)]
reordered.tmslope2.tform <- sign(reordered.tmslope) * sqrt(abs(reordered.tmslope))
ggfluctuation(as.table(reordered.tmslope2.tform), type = "colour") + #
  theme(axis.text.x = theme_text(angle = 90, hjust=1, vjust=.5, size=6, colour="black"),#
    axis.text.y = theme_text(size=6, colour="black")) + #
  xlab("County") + ylab("Index of Rotated Residuals") + #
  coord_equal() + #
  theme(panel.margin = unit(0, "lines"))
qplot(x = reorder(county, rslope, identity), y = rslope, data = data.frame(county = str_trim(unique(county.name)), rslope = rslope)) + coord_flip() + #
theme(axis.text.y = element_text(size=6, colour="black"))
B.slope.svd <- svd(B.slope)#
#
sqrt.cov <- as.matrix(zapsmall(Diagonal( x = 1 / sqrt(B.slope.svd$d[1:84]) ) %*% t(B.slope.svd$u[, 1:84])))#
colnames(sqrt.cov) <- str_trim(unique(county.name))#
rownames(sqrt.cov) <- as.character(1:84)#
#
tform.sqrt.cov <- sign(sqrt.cov) * sqrt(abs(sqrt.cov))#
#
ggfluctuation(as.table(tform.sqrt.cov[, order(rslope.var)]), type = "colour") +#
  theme(axis.text.x = theme_text(angle = 90, hjust=1, vjust=.5, size=6, colour="black"), axis.text.y = theme_text(size=6, colour="black")) +#
  xlab("County") + ylab("Index of Rel. Precision Factor") + #
  coord_equal() + #
  theme(panel.margin = unit(0, "lines"))
order(rslope.var)
reordered.tmslope <- tmslope[, order(rslope.var, decreasing=T)]
reordered.tmslope2.tform <- sign(reordered.tmslope) * sqrt(abs(reordered.tmslope))
ggfluctuation(as.table(reordered.tmslope2.tform), type = "colour") + #
  theme(axis.text.x = theme_text(angle = 90, hjust=1, vjust=.5, size=6, colour="black"),#
    axis.text.y = theme_text(size=6, colour="black")) + #
  xlab("County") + ylab("Index of Rotated Residuals") + #
  coord_equal() + #
  theme(panel.margin = unit(0, "lines"))
reordered.tmslope <- tmslope[, order(rslope.var)]#
reordered.tmslope2.tform <- sign(reordered.tmslope) * sqrt(abs(reordered.tmslope))
ggfluctuation(as.table(reordered.tmslope2.tform), type = "colour") + #
  theme(axis.text.x = theme_text(angle = 90, hjust=1, vjust=.5, size=6, colour="black"),#
    axis.text.y = theme_text(size=6, colour="black")) + #
  xlab("County") + ylab("Index of Rotated Residuals") + #
  coord_equal() + #
  theme(panel.margin = unit(0, "lines"))
numerator.svd <- svd( sqrt.cov %*% A.slope %*% t(sqrt.cov) )#
Ut <- t(numerator.svd$u)#
#
ggfluctuation(as.table(as.matrix(Ut)), type = "colour")
confound.df <- data.frame(confound = diag(A.slope) / diag(B.slope), #
  county = unique(str_trim(county.name)))
heatmap(tmslope[cutree(hc.rows,k=4)==4,], Colv=as.dendrogram(hc.cols), scale='none')
heatmap(tmslope)#
hc.rows <- hclust(dist(tmslope))#
plot(hc.rows)#
#
hc.cols <- hclust(dist(as.matrix(t(tmslope))))#
plot(hc.cols)#
#
# heatmap for first cluster#
heatmap(tmslope[cutree(hc.rows,k=4)==4,], Colv=as.dendrogram(hc.cols), scale='none')
heatmap(tmslope[cutree(hc.rows,k=4)==4,], Colv=as.dendrogram(hc.cols), scale='none')
heatmap(tmslope)
ggfluctuation(as.table(reordered.tmslope2.tform), type = "colour") + #
  theme(axis.text.x = theme_text(angle = 90, hjust=1, vjust=.5, size=6, colour="black"),#
    axis.text.y = theme_text(size=6, colour="black")) + #
  xlab("County") + ylab("Index of Rotated Residuals") + #
  coord_equal() + #
  theme(panel.margin = unit(0, "lines"))
ggfluctuation(as.table(t(reordered.tmslope2.tform)), type = "colour") + #
  theme(axis.text.x = theme_text(angle = 90, hjust=1, vjust=.5, size=6, colour="black"),#
    axis.text.y = theme_text(size=6, colour="black")) + #
  xlab("County") + ylab("Index of Rotated Residuals") + #
  coord_equal() + #
  theme(panel.margin = unit(0, "lines"))
ggfluctuation(as.table(reordered.tmslope2.tform), type = "colour") + #
  theme(axis.text.x = theme_text(angle = 90, hjust=1, vjust=.5, size=6, colour="black"),#
    axis.text.y = theme_text(size=6, colour="black")) + #
  xlab("County") + ylab("Index of Rotated Residuals") + #
  coord_equal() + #
  theme(panel.margin = unit(0, "lines"))
reordered.tmslope <- tmslope[order(rslope.var),]
reordered.tmslope <- tmslope[, order(rslope.var)]#
reordered.tmslope2.tform <- sign(reordered.tmslope) * sqrt(abs(reordered.tmslope))
ggfluctuation(as.table(reordered.tmslope2.tform), type = "colour") + #
  theme(axis.text.x = theme_text(angle = 90, hjust=1, vjust=.5, size=6, colour="black"),#
    axis.text.y = theme_text(size=6, colour="black")) + #
  xlab("County") + ylab("Index of Rotated Residuals") + #
  coord_equal() + #
  theme(panel.margin = unit(0, "lines"))
srrs2 <- read.table ("data/srrs2.dat", header=T, sep=",")#
## Restricting attention to Minnesota#
mn <- subset(srrs2, state=="MN")#
#
## clean names of counties: lower case and remove all white space at the end of names#
mn$county <- tolower(as.character(mn$county))#
mn$county <- gsub(" +$", "", as.character(mn$county))#
#
library(ggplot2)#
library(maps)#
counties <- map_data("county")#
#
# restrict to minnesota#
counties <- subset(counties, region=="minnesota")#
counties$region <- counties$subregion # no point in keeping the regions#
qplot(data=counties, x=long, y=lat, group=group, geom="polygon")#
#
# county level summary of radon data#
library(plyr)#
mn <- cbind(mn, uranium)#
counties.stat <- ddply(mn, .(county), summarize, #
                     radon=mean(activity, na.rm=T),#
                    sdradon=sd(activity, na.rm=T),#
                    uranium=unique(uranium))
ggplot(counties.stat, aes(map_id = county)) + geom_map(aes(fill=radon), map = counties) + #
  expand_limits(x = counties$long, y = counties$lat) + #
  xlab("longitude") + ylab("latitude") + theme_bw()
ggsave(file="map.png", width=2, height=3)
