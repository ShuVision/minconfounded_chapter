qqline
qplot(x = 2, y = prop.reject, data = subset(propreject, subset = ranef != "norm" & random.effect == "b0" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05), geom = c("smooth"), facets = ~ rotation, colour = error, group = interaction(error, ranef), se = F, method = "lm", linetype = ranef) + xlab("s")
Preliminaries#
library(ggplot2)#
#
### Reading in the data#
propreject <- read.csv(file.choose()) # choose PropRejectSummary.csv#
#
propreject$rotation <- factor(propreject$rotation, levels = levels(propreject$rotation)[c(2,3,1)])#
propreject$s <- factor(propreject$s)
qplot(x = 2, y = prop.reject, data = subset(propreject, subset = ranef != "norm" & random.effect == "b0" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05), geom = c("smooth"), facets = ~ rotation, colour = error, group = interaction(error, ranef), se = F, method = "lm", linetype = ranef) + xlab("s")
qplot(x = 2, y = prop.reject, data = subset(propreject, subset = ranef != "norm" & random.effect == "b0" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05), geom = c("point", "smooth"), facets = ~ rotation, colour = error, group = interaction(error, ranef), se = F, method = "lm", linetype = ranef) + xlab("s") + ylab("proportion of tests rejected") + theme_bw() + scale_color_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + scale_linetype_discrete("Random effects\ndistribution", labels = c("Skewed", "Heavy tailed"))
qplot(x = 2, y = prop.reject, data = subset(propreject, subset = ranef != "norm" & random.effect == "b0" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05), geom = c("point", "smooth"), facets = ~ rotation, colour = error, group = interaction(error, ranef), se = F, method = "lm", linetype = ranef)
qplot(x = 2, y = prop.reject, data = subset(propreject, subset = ranef != "norm" & random.effect == "b0" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05), geom = c("point", "smooth"), facets = ~ rotation, colour = error, group = interaction(error, ranef), se = F, method = "lm")
q("no")
Preliminaries#
library(ggplot2)#
#
### Reading in the data#
propreject <- read.csv(file.choose()) # choose PropRejectSummary.csv#
#
propreject$rotation <- factor(propreject$rotation, levels = levels(propreject$rotation)[c(2,3,1)])#
propreject$s <- factor(propreject$s)#
#
### Plotting the type I error#
# Summarizing results of AD tests for random intercept#
qplot(x = s, y = prop.reject, data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b0" & var.settings == "sige2_sigb1"), geom = c("point", "smooth"), colour = error, group = error, linetype = error, se = F, method = "lm") + #
	facet_grid(. ~ rotation, scales = "free") + #
	xlab("s") +#
	ylab("proportion of tests rejected") + #
	scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + 	scale_color_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + #
	ylim(0, .2)#
#
# Summarizing results of AD tests for random slope#
qplot(x = s, y = prop.reject, data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1"), geom = c("point", "smooth"), colour = error, group = error, linetype = error, se = F, method = "lm") + #
	facet_grid(. ~ rotation, scales = "free") + #
	xlab("s") +#
	ylab("proportion of tests rejected") + #
	scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + 	scale_color_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + #
	ylim(0, .4)
Preliminaries#
library(ggplot2)#
library(reshape2)#
library(plyr)#
#
### Reading in the data#
fc.summary <- read.csv(file.choose()) # read in FCsummary.csv#
#
### formatting df for ggplot#
fc.melted <- melt(fc.summary, id.vars=c("sigma_e", "sigma_b", "e_dsn", "b_dsn", "s_int", "s_slope"), value.name = "fc")#
#
# Some labels for the plots#
fc.melted$`Var. structure` <- with(fc.melted, interaction(sigma_e, sigma_b), drop = T)#
fc.melted$`Var. structure` <- factor(fc.melted$`Var. structure`, levels = levels(fc.melted$`Var. structure`)[c(2,1,3,4)])#
levels(fc.melted$variable) <- c("intercept", "slope")#
#
# Making an 's' column compatible with facetting#
fc.melted$s <- NA#
fc.melted$s[fc.melted$variable == "intercept"] <- fc.melted$s_int[fc.melted$variable == "intercept"]#
fc.melted$s[fc.melted$variable == "slope"] <- fc.melted$s_slope[fc.melted$variable == "slope"]#
qplot(x = s, y = fc, data = fc.melted, geom = c("point", "smooth"), group = `Var. structure`,  colour = `Var. structure`, facets = ~ variable, se = FALSE, linetype = `Var. structure`, alpha = I(0.5)) + #
xlim(30, 60) + #
scale_color_discrete(labels = c(expression(paste(sigma[epsilon]^2==4, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==4)))) + #
scale_linetype_discrete(labels = c(expression(paste(sigma[epsilon]^2==4, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==4)))) + #
xlab("s") + ylab("fraction confounding") + theme_bw() + #
theme(legend.position="top")
q("no")
-------------------------------------------------------------------------------#
# Script fitting the model(s) to the radon data; and obtaining residuals#
# for lineups. #
##
# Adam Loy#
# April 2013#
#-------------------------------------------------------------------------------#
#
# -----------------------------------------------------------------------------------------#
### Preliminaries#
# -----------------------------------------------------------------------------------------#
library(lme4)#
library(plyr)#
library(reshape2)#
library(stringr)#
#
radon <- read.csv(file.choose()) ## find radon_for_sims.csv#
#
### Function to reorganize Z like it should be in 511#
BlockZ <- function(object) {#
  Z <- getME(object, "Z")#
  grp.size <- table(object@flist)#
  ngrps <- length(grp.size)#
  nranef <- dim(ranef(object)[[1]])[2]#
  base.ord <- seq(from = 1, by = ngrps, length.out = nranef)#
  ord <- base.ord + rep(0:(ngrps - 1), each = nranef)#
  perm.mat <- t(as(ord, "pMatrix"))#
  return(Z %*% perm.mat)#
}#
#
### Function to calculate the marginal variance of random effects#
lev2.marginal.var <- function(.model) {#
  y <- .model@y#
  X <- getME(.model, "X")#
  Z <- BlockZ(.model)#
  n <- nrow(X)#
  ngrps <- unname(sapply(.model@flist, function(x) length(levels(x))))#
  # Constructing V = Cov(Y)#
  sig0 <- attr(VarCorr(.model), "sc") # sigma(.model)#
  ZDZt <- sig0^2 * crossprod( .model@A )#
  R    <- Diagonal( n = n, x = sig0^2 )#
  D    <- kronecker( Diagonal(ngrps), bdiag(VarCorr(.model)) )#
  V    <- Diagonal(n) + ZDZt#
  # Inverting V#
  V.chol <- chol( V )#
  Vinv   <- chol2inv( V.chol )#
#
  bse <- crossprod( chol(Vinv) %*% Z %*% D ) # Marginal COV. used by Lange and Ryan#
  bse.diag <- diag(bse)#
#
  semat <- matrix(sqrt(bse.diag), ncol = 2, byrow = TRUE)#
#
  return(semat)#
}#
#
### Function for weighted empirical CDF#
wecdf <- function(x, weights) {#
    stopifnot(length(x) == length(weights))#
    sw <- sum(weights)#
    if (length(x) < 1) #
        stop("'x' must have 1 or more non-missing values")#
    stopifnot(all(weights >= 0))#
    ox <- order(x)#
    x  <- x[ox]#
    w  <- weights[ox]#
    vals <- sort(unique(x))#
    xmatch <- factor(match(x, vals), levels = seq_along(vals))#
    wmatch <- tapply(w, xmatch, sum)#
    wmatch[is.na(wmatch)] <- 0#
    rval <- approxfun(vals, cumsum(wmatch) / sw, method = "constant", #
        yleft = 0, yright = 1, f = 0, ties = "ordered")#
    class(rval) <- c("ecdf", "stepfun", class(rval))#
    attr(rval, "call") <- sys.call()#
    return(rval)#
}   #
# -----------------------------------------------------------------------------------------#
### Fitting the models#
# -----------------------------------------------------------------------------------------#
#
# Random intercept, random slope model#
fm <- lmer(log.radon ~ basement + uranium + (basement | county), data = radon)#
#
# -----------------------------------------------------------------------------------------#
### Calculating the original residuals#
# -----------------------------------------------------------------------------------------#
#
# Level-1 residuals (i.e., the error terms)#
e <- resid(fm)#
#
# Random effects (i.e., the level-2 residuals)#
b <- ranef(fm)[[1]] # notice that this is actually a matrix#
#
# -----------------------------------------------------------------------------------------#
### Simulating null residuals via the parametric bootstrap#
# -----------------------------------------------------------------------------------------#
set.seed(987654321)#
sim.y   <- simulate(fm, nsim = 19)                        ## A 919 x 19 matrix of responses#
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
# Simulated level-1 residuals#
sim.e <- llply(sim.mod, resid)                            ## a list of residuals#
sim.e        <- melt( do.call("cbind", sim.e) )[,-1]      ## changing to a data frame#
names(sim.e) <- c("sample", "residual")                   ## setting colnames for faceting#
sim.e.df <- rbind(sim.e, #
			cbind(sample = "true", residual = e))         ## adding the true residuals#
#
# Simulated random intercepts#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random intercepts#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "intercept")                 ## setting colnames for faceting#
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
sim.b0.df <- rbind(sim.b0,#
			 cbind(sample = "true", intercept = b[,1]))   ## adding the true r. intercepts#
sim.b0.df$intercept <- as.numeric(sim.b0.df$intercept)    ## making residuals numeric#
#
### We are really interested in a lineup for the random slopes for our paper#
# Simulated random slopes#
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "slope")                     ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
sim.b1.df <- rbind(sim.b1,#
			 cbind(sample = "true", slope = b[,2]))       ## adding the true r. slopes#
sim.b1.df$slope <- as.numeric(sim.b1.df$slope)            ## making residuals numeric
ls()
library(ggplot2)#
#
# Marginal standard devation for original model#
msd <- lev2.marginal.var(fm) ## ignore the notes#
#
Fn.b0 <- wecdf(b[,1] / msd[,1], weights = msd[,1]^2)  ## create the weighted CDF function#
p.b0  <- Fn.b0(b[,1] / msd[,1])                       ## calc. probs#
qplot(x = qnorm(p.b0), y = b[,1] / msd[,1])#
#
Fn.b1 <- wecdf(b[,2] / msd[,2], weights = msd[,1]^2)  ## create the weighted CDF function#
p.b1  <- Fn.b0(b[,2] / msd[,2])                       ## calc. probs#
qplot(x = qnorm(p.b1), y = b[,2] / msd[,2])#
### Incorporating these into a sim2ulation#
#
# standardized random effects#
b0.std <- b[,1] / msd[,1]#
b1.std <- b[,2] / msd[,2]#
#
# Simulation for weighted Q-Q plots for random intercepts#
sim2.b0 <- llply(sim2.mod, function(x) {#
	se <- lev2.marginal.var(x)[,1]#
	std.b0 <- ranef(x)[[1]][,1] / se#
	Fn <- wecdf(std.b0, weights = se^2)#
	p  <- Fn(std.b0)#
	qs <- qnorm(p)#
	RVAL <- data.frame(intercept = std.b0, quants = qs)  ## list of data frames for plotting#
	return(RVAL)#
} )   #
#
sim2.b0 <- do.call("rbind", sim2.b0)                        ## changing to a single data frame#
sim2.b0$sample <- str_extract(rownames(sim2.b0), "\\d+")    ## adding col. for sim. number#
sim2.b0.df <- rbind(sim2.b0,#
			 data.frame(sample = "true", #
			            intercept = b0.std,#
			            quants = qnorm(p.b0)))            ## adding the true r. intercepts#
#
# Simulation for weighted Q-Q plots for random slopes#
sim2.b0 <- llply(sim2.mod, function(x) {#
	se <- lev2.marginal.var(x)[,1]#
	std.b0 <- ranef(x)[[1]][,1] / se#
	Fn <- wecdf(std.b0, weights = se^2)#
	p  <- Fn(std.b0)#
	qs <- qnorm(p)#
	RVAL <- data.frame(intercept = std.b0, quants = qs)  ## list of data frames for plotting#
	return(RVAL)#
} )   #
#
sim2.b0 <- do.call("rbind", sim2.b0)                        ## changing to a single data frame#
sim2.b0$sample <- str_extract(rownames(sim2.b0), "\\d+")    ## adding col. for sim. number#
sim2.b0.df <- rbind(sim2.b0,#
			 data.frame(sample = "true", #
			            intercept = b0.std,#
			            quants = qnorm(p.b0)))            ## adding the true r. intercepts#
# Simulation for weighted Q-Q plots for random slopes#
sim2.b1 <- llply(sim2.mod, function(x) {#
	se <- lev2.marginal.var(x)[,1]#
	std.b1 <- ranef(x)[[1]][,1] / se#
	Fn <- wecdf(std.b1, weights = se^2)#
	p  <- Fn(std.b1)#
	qs <- qnorm(p)#
	RVAL <- data.frame(intercept = std.b1, quants = qs)  ## list of data frames for plotting#
	return(RVAL)#
} )   #
#
sim2.b1 <- do.call("rbind", sim2.b1)                        ## changing to a single data frame#
sim2.b1$sample <- str_extract(rownames(sim2.b1), "\\d+")    ## adding col. for sim2. number#
sim2.b1.df <- rbind(sim2.b1,#
			 data.frame(sample = "true", #
			            intercept = b1.std,#
			            quants = qnorm(p.b1)))            ## adding the true r. intercepts
Simulation for weighted Q-Q plots for random intercepts#
sim2.b0 <- llply(sim.mod, function(x) {#
	se <- lev2.marginal.var(x)[,1]#
	std.b0 <- ranef(x)[[1]][,1] / se#
	Fn <- wecdf(std.b0, weights = se^2)#
	p  <- Fn(std.b0)#
	qs <- qnorm(p)#
	RVAL <- data.frame(intercept = std.b0, quants = qs)  ## list of data frames for plotting#
	return(RVAL)#
} )   #
#
sim2.b0 <- do.call("rbind", sim2.b0)                        ## changing to a single data frame#
sim2.b0$sample <- str_extract(rownames(sim2.b0), "\\d+")    ## adding col. for sim. number#
sim2.b0.df <- rbind(sim2.b0,#
			 data.frame(sample = "true", #
			            intercept = b0.std,#
			            quants = qnorm(p.b0)))            ## adding the true r. intercepts
Simulation for weighted Q-Q plots for random slopes#
sim2.b0 <- llply(sim.mod, function(x) {#
	se <- lev2.marginal.var(x)[,1]#
	std.b0 <- ranef(x)[[1]][,1] / se#
	Fn <- wecdf(std.b0, weights = se^2)#
	p  <- Fn(std.b0)#
	qs <- qnorm(p)#
	RVAL <- data.frame(intercept = std.b0, quants = qs)  ## list of data frames for plotting#
	return(RVAL)#
} )   #
#
sim2.b0 <- do.call("rbind", sim2.b0)                        ## changing to a single data frame#
sim2.b0$sample <- str_extract(rownames(sim2.b0), "\\d+")    ## adding col. for sim. number#
sim2.b0.df <- rbind(sim2.b0,#
			 data.frame(sample = "true", #
			            intercept = b0.std,#
			            quants = qnorm(p.b0)))            ## adding the true r. intercepts#
# Simulation for weighted Q-Q plots for random slopes#
sim2.b1 <- llply(sim2.mod, function(x) {#
	se <- lev2.marginal.var(x)[,1]#
	std.b1 <- ranef(x)[[1]][,1] / se#
	Fn <- wecdf(std.b1, weights = se^2)#
	p  <- Fn(std.b1)#
	qs <- qnorm(p)#
	RVAL <- data.frame(intercept = std.b1, quants = qs)  ## list of data frames for plotting#
	return(RVAL)#
} )   #
#
sim2.b1 <- do.call("rbind", sim2.b1)                        ## changing to a single data frame#
sim2.b1$sample <- str_extract(rownames(sim2.b1), "\\d+")    ## adding col. for sim2. number#
sim2.b1.df <- rbind(sim2.b1,#
			 data.frame(sample = "true", #
			            intercept = b1.std,#
			            quants = qnorm(p.b1)))            ## adding the true r. intercepts
Simulation for weighted Q-Q plots for random intercepts#
sim2.b0 <- llply(sim.mod, function(x) {#
	se <- lev2.marginal.var(x)[,1]#
	std.b0 <- ranef(x)[[1]][,1] / se#
	Fn <- wecdf(std.b0, weights = se^2)#
	p  <- Fn(std.b0)#
	qs <- qnorm(p)#
	RVAL <- data.frame(intercept = std.b0, quants = qs)  ## list of data frames for plotting#
	return(RVAL)#
} )   #
#
sim2.b0 <- do.call("rbind", sim2.b0)                        ## changing to a single data frame#
sim2.b0$sample <- str_extract(rownames(sim2.b0), "\\d+")    ## adding col. for sim. number#
sim2.b0.df <- rbind(sim2.b0,#
			 data.frame(sample = "true", #
			            intercept = b0.std,#
			            quants = qnorm(p.b0)))            ## adding the true r. intercepts
Simulation for weighted Q-Q plots for random slopes#
sim2.b1 <- llply(sim.mod, function(x) {#
	se <- lev2.marginal.var(x)[,1]#
	std.b1 <- ranef(x)[[1]][,1] / se#
	Fn <- wecdf(std.b1, weights = se^2)#
	p  <- Fn(std.b1)#
	qs <- qnorm(p)#
	RVAL <- data.frame(intercept = std.b1, quants = qs)  ## list of data frames for plotting#
	return(RVAL)#
} )   #
#
sim2.b1 <- do.call("rbind", sim2.b1)                        ## changing to a single data frame#
sim2.b1$sample <- str_extract(rownames(sim2.b1), "\\d+")    ## adding col. for sim2. number#
sim2.b1.df <- rbind(sim2.b1,#
			 data.frame(sample = "true", #
			            intercept = b1.std,#
			            quants = qnorm(p.b1)))            ## adding the true r. intercepts
hed(sim2.bq.df)
head(sim2.bq.df)
head(sim2.b0.df)
head(sim2.b1.df)
tail(sim2.b1.df)
tail(sim2.b0.df)
packages <- c("ggplot2", "productplots", "GGally", #
              "gridExtra", "lubridate",#
              "maps","ggmap", "mapproj",#
              "animation")#
#
install.packages(packages)#
#
library(ggplot2)#
library(productplots)#
library(GGally)#
library(lubridate)#
library(maps)#
library(ggmap)#
library(animation)
today()#
qplot(rnorm(100), rnorm(100), colour=factor(rbinom(100, 1, 0.5)))#
qplot(rnorm(100), rnorm(100), colour=rbinom(100, 5, 0.2))
install.packages("ggplot2", dependencies=TRUE)#
# installs a few other packages as well#
install.packages("MASS")#
install.packages("lme4")#
install.packages("gdata")#
install.packages("foreign")#
install.packages("reshapeGUI")
Preliminaries#
library(ggplot2)#
library(reshape2)#
library(plyr)#
#
### Reading in the data#
fc.summary <- read.csv(file.choose()) # read in FCsummary.csv
table(fc.summary$s_int)
table(fc.summary$s_slope)
head(fc.summary)
fc.summary$fc.b0 <- fc.summary$fc.b0 * fc.summary$s_int
fc.summary$fc.b1 <- fc.summary$fc.b1 * fc.summary$s_slope
head(fc.summary)
tail(fc.summary)
fc.summary <- read.csv(file.choose()) # read in FCsummary.csv
correcting fc#
fc.summary$fc.b0 <- fc.summary$fc.b0 * fc.summary$s_int#
fc.summary$fc.b1 <- fc.summary$fc.b1 * fc.summary$s_slope
fc.summary$fc.b0 <- fc.summary$fc.b0 / 60
fc.summary$fc.b1 <- fc.summary$fc.b1 / 60
formatting df for ggplot#
fc.melted <- melt(fc.summary, id.vars=c("sigma_e", "sigma_b", "e_dsn", "b_dsn", "s_int", "s_slope"), value.name = "fc")#
#
# Some labels for the plots#
fc.melted$`Var. structure` <- with(fc.melted, interaction(sigma_e, sigma_b), drop = T)#
fc.melted$`Var. structure` <- factor(fc.melted$`Var. structure`, levels = levels(fc.melted$`Var. structure`)[c(2,1,3,4)])#
levels(fc.melted$variable) <- c("intercept", "slope")#
#
# Making an 's' column compatible with facetting#
fc.melted$s <- NA#
fc.melted$s[fc.melted$variable == "intercept"] <- fc.melted$s_int[fc.melted$variable == "intercept"]#
fc.melted$s[fc.melted$variable == "slope"] <- fc.melted$s_slope[fc.melted$variable == "slope"]
qplot(x = s, y = fc, data = fc.melted, geom = c("point"), group = `Var. structure`,  colour = `Var. structure`, facets = ~ variable,  linetype = `Var. structure`, size=I(3), shape=b_dsn) + #
xlim(30, 60) + #geom_smooth(se = FALSE, size=1.5) +#
scale_color_brewer("Variance structure", palette="Set2", labels = c(expression(paste(sigma[epsilon]^2==4, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==4)))) + #
scale_linetype_discrete("Variance structure", labels = c(expression(paste(sigma[epsilon]^2==4, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==4)))) + #
xlab("s") + ylab("fraction of confounding") + theme_bw() + #
theme(legend.position="bottom", legend.key.width = unit(3, "line")) + geom_line(aes(group=interaction(e_dsn, b_dsn, `Var. structure`))) + scale_shape_manual("Random Effects", values=c(1, 17, 15), labels = c("Exponential", "Normal", expression(t[3])))
library(grid)
qplot(x = s, y = fc, data = fc.melted, geom = c("point"), group = `Var. structure`,  colour = `Var. structure`, facets = ~ variable,  linetype = `Var. structure`, size=I(3), shape=b_dsn) + #
xlim(30, 60) + #geom_smooth(se = FALSE, size=1.5) +#
scale_color_brewer("Variance structure", palette="Set2", labels = c(expression(paste(sigma[epsilon]^2==4, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==4)))) + #
scale_linetype_discrete("Variance structure", labels = c(expression(paste(sigma[epsilon]^2==4, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==4)))) + #
xlab("s") + ylab("fraction of confounding") + theme_bw() + #
theme(legend.position="bottom", legend.key.width = unit(3, "line")) + geom_line(aes(group=interaction(e_dsn, b_dsn, `Var. structure`))) + scale_shape_manual("Random Effects", values=c(1, 17, 15), labels = c("Exponential", "Normal", expression(t[3])))
qplot(x = s, y = fc, data = fc.melted, geom = c("point"), group = `Var. structure`,  colour = `Var. structure`, facets = ~ variable,  linetype = `Var. structure`, size=I(2), shape=b_dsn) + #
xlim(30, 60) + #geom_smooth(se = FALSE, size=1.5) +#
scale_color_brewer("Variance structure", palette="Set2", labels = c(expression(paste(sigma[epsilon]^2==4, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==4)))) + #
scale_linetype_discrete("Variance structure", labels = c(expression(paste(sigma[epsilon]^2==4, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==4)))) + #
xlab("s") + ylab("fraction of confounding") + theme_bw() + #
theme(legend.position="bottom", legend.key.width = unit(3, "line")) + geom_line(aes(group=interaction(e_dsn, b_dsn, `Var. structure`))) + scale_shape_manual("Random Effects", values=c(1, 17, 15), labels = c("Exponential", "Normal", expression(t[3])))
qplot(x = s, y = fc, data = fc.melted, geom = c("point"), group = `Var. structure`,  colour = `Var. structure`, facets = ~ variable,  linetype = `Var. structure`, shape=b_dsn) + #
xlim(30, 60) + #geom_smooth(se = FALSE, size=1.5) +#
scale_color_brewer("Variance structure", palette="Set2", labels = c(expression(paste(sigma[epsilon]^2==4, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==4)))) + #
scale_linetype_discrete("Variance structure", labels = c(expression(paste(sigma[epsilon]^2==4, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==4)))) + #
xlab("s") + ylab("fraction of confounding") + theme_bw() + #
theme(legend.position="bottom", legend.key.width = unit(3, "line")) + geom_line(aes(group=interaction(e_dsn, b_dsn, `Var. structure`))) + scale_shape_manual("Random Effects", values=c(1, 17, 15), labels = c("Exponential", "Normal", expression(t[3])))
qplot(x = s, y = fc, data = fc.melted, geom = c("point"), group = `Var. structure`,  colour = `Var. structure`, facets = ~ variable,  linetype = `Var. structure`, size=I(2.5), shape=b_dsn) + #
xlim(30, 60) + #geom_smooth(se = FALSE, size=1.5) +#
scale_color_brewer("Variance structure", palette="Set2", labels = c(expression(paste(sigma[epsilon]^2==4, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==4)))) + #
scale_linetype_discrete("Variance structure", labels = c(expression(paste(sigma[epsilon]^2==4, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==4)))) + #
xlab("s") + ylab("fraction of confounding") + theme_bw() + #
theme(legend.position="bottom", legend.key.width = unit(3, "line")) + geom_line(aes(group=interaction(e_dsn, b_dsn, `Var. structure`))) + scale_shape_manual("Random Effects", values=c(1, 17, 15), labels = c("Exponential", "Normal", expression(t[3])))
getwd()
ggsave("fc_by_s.pdf", width = 6.5, height=3.75, units="in")
getwd()
qplot(x = s, y = fc, data = fc.melted, geom = c("point"), group = `Var. structure`,  colour = `Var. structure`, facets = ~ variable,  linetype = `Var. structure`, size=I(2.5), shape=b_dsn) + #
xlim(30, 60) + #geom_smooth(se = FALSE, size=1.5) +#
scale_color_brewer("Variance structure", palette="Set2", labels = c(expression(paste(sigma[epsilon]^2==4, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==4)))) + #
scale_linetype_discrete("Variance structure", labels = c(expression(paste(sigma[epsilon]^2==4, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==4)))) + #
xlab("s") + ylab("fraction of confounding") + theme_bw() + #
theme(legend.position="bottom", legend.key.width = unit(3, "line")) + geom_line(aes(group=interaction(e_dsn, b_dsn, `Var. structure`))) + scale_shape_manual("Random Effects", values=c(1, 17, 15), labels = c("Exponential", "Normal", expression(t[3])))
seq(3L)
e.dsn <- c("norm", "t", "exp")
seq_along(e.dsn)
getwd()
getwd("..")
dir("..")
dir("../..")
library(RcppEigen)
e.dsn
class(e.dsn)
dim(e.dsn)
ncol(e.dsn)
