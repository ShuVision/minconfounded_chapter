A %/%B
A / B
tr(A)
trace(A)
diag(A)
diag(A) / diag(B)
solve(A)
matrix(c(1,2,2,3) nrow=2)
matrix(c(1,2,2,3), nrow=2)
qr(matrix(c(1,2,2,3), nrow=2))
A <- matrix(c(1,2,2,3), nrow=2)
B <- matrix(c(2,1,3,2), nrow=2)
qr(B)
A
B
solve(B) %*% A
diag(solve(B) %*% A)
A
B
1/2
3/2
Preliminaries#
library(lme4)#
library(arm)#
library(nortest)#
library(multicore)#
#
# Function to reorganize Z#
BlockZ <- function(object) {#
  Z <- getME(object, "Z")#
  grp.size <- table(object@flist)#
  ngrps <- length(grp.size)#
  nranef <- dim(ranef(object)[[1]])[2]#
  base.ord <- seq(from = 1, by = ngrps, length.out = nranef)#
  ord <- base.ord + rep(0:(ngrps - 1), each = nranef)#
  perm.mat <- t(as(ord, "pMatrix"))#
  return(Z %*% perm.mat)#
}#
#
### Reading in the radon data provided by Gelman and Hill (2007)#
srrs2 <- read.table ("srrs2.dat", header=T, sep=",")#
#
## Restricting attention to Minnesota#
mn <- srrs2$state=="MN"#
radon <- srrs2$activity[mn]#
log.radon <- log (ifelse (radon==0, .1, radon))#
floor <- srrs2$floor[mn]       # 0 for basement, 1 for first floor#
n <- length(radon)#
y <- log.radon#
basement <- floor#
#
## Getting county index variable#
county.name <- as.vector(srrs2$county[mn])#
uniq <- unique(county.name)#
J <- length(uniq)#
county <- rep (NA, J)#
for (i in 1:J){#
  county[county.name==uniq[i]] <- i#
}#
#
## Reading the county-level data#
srrs2.fips <- srrs2$stfips*1000 + srrs2$cntyfips#
cty <- read.table ("cty.dat", header=T, sep=",")#
usa.fips <- 1000*cty[,"stfips"] + cty[,"ctfips"]#
usa.rows <- match (unique(srrs2.fips[mn]), usa.fips)#
uranium <- cty[usa.rows,"Uppm"]#
u <- log (uranium)#
uranium <- u[county]
Preliminaries#
library(lme4)#
library(arm)#
library(nortest)#
library(multicore)#
#
# Function to reorganize Z#
BlockZ <- function(object) {#
  Z <- getME(object, "Z")#
  grp.size <- table(object@flist)#
  ngrps <- length(grp.size)#
  nranef <- dim(ranef(object)[[1]])[2]#
  base.ord <- seq(from = 1, by = ngrps, length.out = nranef)#
  ord <- base.ord + rep(0:(ngrps - 1), each = nranef)#
  perm.mat <- t(as(ord, "pMatrix"))#
  return(Z %*% perm.mat)#
}#
#
### Reading in the radon data provided by Gelman and Hill (2007)#
srrs2 <- read.table ("srrs2.dat", header=T, sep=",")#
#
## Restricting attention to Minnesota#
mn <- srrs2$state=="MN"#
radon <- srrs2$activity[mn]#
log.radon <- log (ifelse (radon==0, .1, radon))#
floor <- srrs2$floor[mn]       # 0 for basement, 1 for first floor#
n <- length(radon)#
y <- log.radon#
basement <- floor#
#
## Getting county index variable#
county.name <- as.vector(srrs2$county[mn])#
uniq <- unique(county.name)#
J <- length(uniq)#
county <- rep (NA, J)#
for (i in 1:J){#
  county[county.name==uniq[i]] <- i#
}#
#
## Reading the county-level data#
srrs2.fips <- srrs2$stfips*1000 + srrs2$cntyfips#
cty <- read.table ("cty.dat", header=T, sep=",")#
usa.fips <- 1000*cty[,"stfips"] + cty[,"ctfips"]#
usa.rows <- match (unique(srrs2.fips[mn]), usa.fips)#
uranium <- cty[usa.rows,"Uppm"]#
u <- log (uranium)#
uranium <- u[county]
ls()
fm <- lmer(log.radon ~ basement + uranium + (basement | county), REML = FALSE)
.mod <- fm
X <- getME(.mod, "X")#
           Z <- BlockZ(.mod)#
           n <- nrow(X)#
           p <- ncol(X)#
           ngrps <- unname( summary(.mod)@ngrps )#
           vc <- VarCorr(.mod)#
		   D <- kronecker( Diagonal(ngrps), as.matrix(vc[[1]]))#
		   R <- Diagonal( n = n, x = attr(vc, "sc")^2 )#
		   V <- Z %*% D %*% t(Z) + R#
		   V.chol <- chol( V )#
		   Vinv  <- chol2inv( V.chol )
xvix <- t(X) %*% Vinv %*% X#
		   xvi <- t(X) %*% Vinv#
		   rhs <- crossprod(xvi, solve(xvix, xvi))#
		   P <- Vinv - rhs
A1 <- R %*% P %*% Z %*% D %*% t(Z) %*% P %*% R
B1 <- R %*% P %*% R
dim(A1)
dim(B1)
library(MASS)
library(Matrix)
image(B1)
j <- ginv(B1)
j <- ginv(as.matrix(B1))
sum(diag(j %*% A1))
sum(diag(j %*% A1)) / 919
summary(diag(A1) / diag(B1))
A2.int <- t(L.int) %*% D %*% t(Z) %*% P %*% R %*% P %*% Z %*% D %*% L.int
L.int <- kronecker(Diagonal(ngrps), c(1, 0))
pzdl.int <- P %*% Z %*% D %*% L.int
A2.int <- t(L.int) %*% D %*% t(Z) %*% P %*% R %*% P %*% Z %*% D %*% L.int
B2.int <- t(L.int) %*% D %*% t(Z) %*% P %*% Z %*% D %*% L.int
summary(diag(ginv(as.matrix(B2.int)) %*% A2.int))
sum(diag(ginv(as.matrix(B2.int)) %*% A2.int))
summary(diag(ginv(as.matrix(B2.int)) %*% A2.int))
summary(diag(A2.int) / diag(B2.int))
sum(diag(A2.int)) / sum(diag(B2.int)))
sum(diag(A2.int)) / sum(diag(B2.int))
sum(diag(A2.int)) / sum(diag(B2.int))
W2.int <- try( mcrotate(A2.int, B2.int) )
mcrotate <- function(A, B) {#
  r <- rankMatrix(B)#
  B.svd <- svd(B)#
  Cr.diag <- B.svd$d[1:r]#
  Tr <- B.svd$u[, 1:r]#
  A.star <- Diagonal( x = 1 / sqrt(Cr.diag) ) %*% t(Tr) %*% #
    A %*% #
    Tr %*% Diagonal( x = 1 / sqrt(Cr.diag) )#
  A.star.svd <- svd( A.star )#
  W <- Tr %*% Diagonal( x = 1 / sqrt( Cr.diag ) ) %*% A.star.svd$u#
  return(W)#
}
W2.int <- try( mcrotate(A2.int, B2.int) )
W2.int
str(W2.int)
if( class(W2.int) == "try-error")  W2.int <- NA else W2.int <- as.matrix(W2.int)
str(W2.int)
dim(W2.int)
dim(A)
dim(A2.int)
numerator <- t(W2.int) %*% A2.int %*% W2.int
denom <- t(W2.int) %*% B2.int %*% W2.int
head(denom)
dim(denom)
dim(numerator)
all.equall(diag(nrow=84), denom)
all.equal(diag(nrow=84), denom)
all.equal(diag(nrow=84), as.matrix(denom))
all.equal(as.matrix(diag(nrow=84)), as.matrix(denom))
all.equal(as.matrix(diag(nrow=84)), unname(as.matrix(denom)))
diag(solve(denom) %*% numerator)
sum(diag(solve(denom) %*% numerator))
sum(diag(solve(denom) %*% numerator)) / 84
sum(diag(ginv(B2.int) %*% A2.int)) / 84
sum(diag(ginv(as.matrix(B2.int)) %*% A2.int)) / 85
sum(diag(solve(denom) %*% numerator)) / 85
head(t(W2.int) %*% W2.int)
head((W2.int) %*% t(W2.int))
head(t(W2.int) %*% W2.int)
install.package("far")
install.packages("far")
library(far)
orthonormalization(W2.int)
j <- orthonormalization(W2.int)
head(t(j) %*% j)
head((j) %*% t(j))
dim(j)
head(j)
dim(W2.int)
j <- orthonormalization(W2.int, basis=F)
dim(j)
denom <- t(j) %*% B2.int %*% j
numerator <- t(j) %*% A2.int %*% j
sum(diag(solve(denom) %*% numerator)) / 84
diag(solve(denom) %*% numerator))
diag(solve(denom) %*% numerator)
re <- ranef(fm)
library(lme4)
re <- ranef(fm)
detach(package:nlme)
detach(package:far)
detach(package:nlme)
re <- ranef(fm)
haed(re)
re <- ranef(fm)[[1]]
head(re)
dim(re)
dim(W2.int)
qqnorm(t(W2.int) %*% re[,1])
qqnorm(t(j) %*% re[,1])
qqline(t(j) %*% re[,1])
qqnorm(re[,1])
far:::orthonormalization
head(t(j) %*% B2.int %*% j)
image(W2.int)
image(j)
image(t(W2.int) %*% A2.int %*% W2.int)
image(W2.int %*% t(W2.int))
head(W2.int %*% t(W2.int))
j <- far:::orthonormalization(W2.int, basis=F)
image(J)
image(j)
head(t(j) %*% B2.int %*% j)
dim(j)
j <- far:::orthonormalization(W2.int, basis=T)
dim(j)
head(t(j) %*% B2.int %*% j)
image(j)
image(t(j) %*% B2.int %*% j)
tail(t(j) %*% B2.int %*% j)
jsvd <- svd(B2.int)
jsvd$u[,1:84]
all.equal(t(jsvd$u[,1:84]) %*% jsvd$u[,1:84], diag(1, nrow=84))
all.equal((jsvd$u[,1:84]) %*% t(jsvd$u[,1:84]), diag(1, nrow=84))
dim((jsvd$u[,1:84]) %*% t(jsvd$u[,1:84]))
head((jsvd$u[,1:84]) %*% t(jsvd$u[,1:84]))
dim(W2.int)
all.equal(as.matrix(t(W2.int) %*% W2.int), diag(84))
all.equal(as.matrix(t(W2.int) %*% W2.int), diag(85))
all.equal(as.matrix(t(W2.int) %*% W2.int), diag(84))
all.equal(as.matrix((W2.int) %*% t(W2.int)), diag(85))
shapiro.test(re[,1])
j <- far:::orthonormalization(W2.int, basis=F)
dim(j)
j <- far:::orthonormalization(W2.int, basis=T)
dim(j)
j <- far:::orthonormalization(W2.int, basis=F)
shapiro.test(t(j) %*% re[,1])
qqnorm(t(j) %*% re[,1])
qqline(t(j) %*% re[,1])
j <- far:::orthonormalization(W2.int, basis=T)
qqnorm(t(j) %*% re[,1])
qqline(t(j) %*% re[,1])
library(normtests)
library(normtest)
library(nortest)
help(package=nortest)
adtest(t(j) %*% re[,1])
ad.test(t(j) %*% re[,1])
cvm(t(j) %*% re[,1])
cvm.test(t(j) %*% re[,1])
lillie.test(t(j) %*% re[,1])
sf.test(t(j) %*% re[,1])
pearson.test(t(j) %*% re[,1])
sf.test(re[,1])
sf.test(re[,2])
L.slope <- kronecker(Diagonal(ngrps), c(0, 1))
A2.slope <- as.matrix( attr(vc, "sc")^2 * crossprod(P %*% Z %*% D %*% L.slope) )
B2.slope <- t(L.slope) %*% D %*% t(Z) %*% P %*% Z %*% D %*% L.slope
W2.slope <- try( mcrotate(A2.slope, B2.slope) )
j2 <- far:::orthonormalization(W2.slope, basis = F)
sf.test(t(j2) %*% re[,2])
qqnorm(t(j2) %*% re[,2])
qqline(t(j2) %*% re[,2])
qqnorm(t(W2.slope) %*% re[,2])
qqline(t(j2) %*% re[,2])
qqslope(t(j2) %*% re[,2])
qqline(t(j2) %*% re[,2])
qqline(t(W2.slope) %*% re[,2])
qqnorm(t(j2) %*% re[,2])
qqline(t(j2) %*% re[,2])
sf.test(re[,2])
qqnorm(re[,2])
dim(j2)
j2 <- far:::orthonormalization(W2.slope, basis = T)
plot(re[,2], t(W2.slope) %*% re[,2])
plot(re[,2], t(j2) %*% re[,2])
qqnorm(resid(fm))
W1 <- try( mcrotate(A1, B1) )
if( class(W1) == "try-error")  W1 <- NA else W1 <- as.matrix(W1)
j1 <- far:::orthonormalization(W1, basis=F)
far:::orthonormalization
image(crossprod(W1))
str(W1)
image(crossprod(W1))
head(crossprod(W1)[,1:6])
help(package=Matrix)
head(zapsmall(crossprod(W1)[,1:6]))
library(som)
install.packages("som")
library(som)
help(package="som")
?crossprod
> head(zapsmall((t(W1) %*% W1))[,1:6]))
> head(zapsmall((t(W1) %*% W1)[,1:6]))
> head(zapsmall((t(W1) %*% W1)[,1:6]))
j <- (t(W1) %*% W1)
dim(j)
head(zapsmall(j)[,1:6])
17 * .06
17000 * .06
17000 * .06 + 17000*.02
17700 * .06 + 17700*.02
17700 * .06 + 17700*.02 + (52000-17700) * .04 + (52000 - 17700) * .09
(17700 * .06 + 17700*.02 + (52000-17700) * .04 + (52000 - 17700) * .09) * 30
(17700 * .06 + 17700*.02 + (52000-17700) * .04 + (52000 - 17700) * .09) * 40
(17700 * .06 + 17700*.02 + (52000-17700) * .04 + (52000 - 17700) * .09) * 35
40000*.1
?array
?list
j <- list("array")
j
j[[1]] <- matrix(1:9, nrow=3)
j
j[[2]] <- matrix(2*(1:9), nrow=3)
j
str(j)
j[[3]] <- matrix(2*(1:9), nrow=3)
j[[4]] <- matrix(2*(1:9), nrow=3)
j
dim(j)
j[[2:3]]
j[1,,]
dim(j)
dim(j[1])
dim(j[[1]])
class(j)
dim(j[2:3])
j[2:3]
j[[1]]
as.vector(j[[1]])
j
j2 <- lapply(j, as.vector)
j2
do.call('cbind', j2)
library(highlight)
?highlight
?options
